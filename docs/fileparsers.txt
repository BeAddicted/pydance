--NOTE: This assumes you are familiar the .dance format described in
  'dance-spec.txt' included with pyDDR.--

The fileparsers.py file contains classes appropriate to parsing
various file formats such as DWI or .step. These should only be called
through the wrapper class SongItem which provides an abtracted
interface.

The job of a file parser class is to translate a step pattern format
into the '.dance' format, which pyDDR also uses internally. A file
parser needs only one method, the constructor:
  __init__(self, filename, read_steps)

filename is the full path and base name of the file to
load. read_steps is a boolean. If it is false, the parser need not
load and convert the actual (the self.steps object described later),
but must do everything else.

The object returned by the constructor must have the following
members:

self.info - a dictionary of metadata keys. The meaning of the key and
values are as described in the .dance specification. The values must
already be in the format most convenient to their use (integers and
floats as numbers, filenames and strings as strings). The "preview"
value must be a tuple of two floats. The keys that are mandatory
in the .dance spec are mandatory in this dict. Other keys may
be set to None, or left out, to get their default values.

Any automatic detection of the filename, background, or banner, must
be done in the file parser class. These keys are expected to be
nonexistant, none, or valid filenames, when the object is returned.

self.lyrics - a sequence (list or tuple) of sequences (lists or
tuples) containing three items - display time, channel, and text to
display for the lyric. May be None, but must be present.

self.difficulty - a dict with keys of game modes (SINGLE, DOUBLE),
values of dicts with keys of difficulties (BASIC, HEAVY) with values
of integers, 0-X, of difficulty level.

self.description - a list of strings, from the DESCRIPTION
section of the dance format. May be none, but must be present.

self.steps - a dict with the same structure as difficulty, but instead
of integers, the leaf values are lists of events in the format
[type, arg1, arg2], for example ["q", 0, 0, 1, 1], ["B", 125.5], or
["R"]. The possible values and arguments follow the .dance format
specification.
