
                                  About pyDDR

   pyDDR is a dancing simulator, primarily for GNU/Linux, but it also
   runs on other UNIX-like operating systems, Windows, and Mac OS X. DDR
   stands for "Dance Dance Revolution", a game that's slowly earning
   popularity in the United States and other countries, that comes from
   Japan. The game idea is simple. There's a mat with four directional
   arrows you can step on, and the game scrolls arrows up the screen
   while playing a song. When the arrows reach the top of the screen (not
   sooner and not later, since they pass over stationary arrows), you hit
   the corresponding arrow on the pad, and given that you hit it on time
   with the beat, you score points. The idea is that the game is supposed
   to either teach you to dance, or simulate dancing. It works to a
   degree. =]

   However, if you're just hearing about this game (or you're broke), you
   don't actually need a mat to play pyDDR (although it definitely makes
   it more fun). You can use a keyboard or regular joystick instead.

   This document assumes you've managed to install pyDDR already. If not,
   you might want to look at the INSTALL file included with the source.

                                 Playing pyDDR

   To play the game, just select "Play Game" from the menu and select a
   song. Press j and l to change your difficulty setting (more bars means
   more difficult). Hit enter when you're on a difficulty and song you
   like.

   Oh wait, now there's all these arrows scrolling up the screen - what
   should you do? Actually, it's pretty simple. When the arrows get to
   the top (which is in time with the music), step on the direction of
   the arrow on your pad. If you're using the keyboard, you can just IJKL
   for up/down/left/right.

   If you want to play a versus game, just hit start on the second
   player's dance mat, or '2' on the keyboard; The second player uses the
   arrow keys.

   If you need to exit the game or back out of menus, just press escape.

                               Configuring pyDDR

   The easy way to configure pyDDR is to use the in-game configuration
   menus. Just select the menu item you want to change and hit enter or
   left and right. If you need more precise configuration, read on.

   pyDDR reads from configuration files in appropriate places. This means
   /etc/pyddr.cfg and ~/.pyddr/pyddr.cfg on UNIX,
   /Library/Preferences/pyDDR/pyddr.cfg and
   ~/Library/Preferences/pyDDR/pyddr.cfg on Mac OS X, and pyddr.cfg in the
   current directory on all platforms (note that this is the only
   configuration file Windows systems will read). Files are read in the
   order listed above.

Adding Songs

   To add songs, you just need to put the .step file, music file, and (if
   they exist) background and banner files into one of your song
   directories. This is the songdir configuration variable. On POSIX
   systems this is /usr/share/games/pyddr/songs,
   /usr/local/share/games/pyddr/songs, and ~/.pyddr/songs. On Windows,
   this is anywhere in the directory pyDDR was installed in. On Mac OS X,
   this is the folder "pyDDR Songs" in your Music folder.

pyddr.cfg

   There's a ton of options for this program, most of them with confusing
   names. A complete (as of sometime between 0.6.1 and 0.6.2) list
   follows.

  Gameplay Options

   arrowcolors 1|2|3|4
          Normally there are three colors of arrows; one for on-beat
          (quarter notes), one for exactly off-beat (eighth notes), and
          one for all other kinds (16th, 24th, and so on). If you change
          this option, you will only see limited colors, which can make
          the game much harder.

   assist 0|1
          In this mode, pyDDR will play a sound when you are supposed to
          hit an arrow. It's useful if you can't see the screen, or need
          help getting on beat in a particular song.

   autofail 1|0
          If this is turned off, the game will continue, even when your
          lifebar runs out.

   badknees 0|1
          If you have trouble with jumps (two arrows at once), you can
          turn this option on to change jumps to one regular arrow.

   grading 1|0
          pyDDR will normally display a grade at the end of every song.
          Turning this option off will bring you back to the song
          selector instead.

   hidden [num] (default 0)
          This makes arrows fade out when they are a certain number of
          beats before the top arrows. You do, however, still have to hit
          them. :)

   little 0|1|2|3 (default 0)
          If you want to try a harder song but want simpler steps, you
          can set this option. 1 removes 16th notes from the song, 2
          removes 8th notes, and 3 removes 16th and 8th notes.

   lowestcombo [num] (default 4)
          The number of greats, perfects, or marvelouses you need in a
          row before it begins to count as a "combo" (which affects
          scoring and judging).

   reversescroll 0|1
          Normally arrows scroll from bottom to top. If this is on, they
          will scroll from top to bottom.

   scrollspeed [num] (default 1.0)
          You can use this to make the arrows scroll faster or slower
          (which changes how many are on the screen at any time and the
          spacing between them). It can be a fractional value, like 0.5
          or 1.33.

   showtoparrows 1|0
          This removes the visual aid of the arrows at the top, making
          you pay more attention to the beat of the music.

   sudden [num] (default 0)
          This makes arrows appear only after they are a certain number
          of beats up the screen. It's the opposite of hidden.

  Graphical Options

   arrowspin 0|1
          If this option is on, the arrows will spin around in circles as
          they go up the screen.

   arrowscale [num] (default 1)
          Arrows normally stay the same size as they go up the screen.
          This option makes them shrink (if it's less than 1) or grow (if
          it's more than 1).

   bgbrightness [num] (default 127)
          This option determines how bright the background during the
          song is. Higher numbers mean a brighter background.

   explodestyle [0|1|2|3] (default 3)
          pyDDR usually displays an effect if you successfully hit an
          arrow, rotating and scaling the arrow at the top. If this is
          too CPU intensive (or you just don't like it), you can set it
          to 0 for no effect, 1 for rotating, 2 for scaling, and 3 for
          rotating and scaling.

   fpsdisplay 1|0
          If this is on pyDDR will display an FPS counter in the corner.
          See the FAQ for what to do if your FPS is very low.

   gfxtheme [themename]
          Sets your graphical theme (affecting the look of the arrows and
          your lifebar). pyDDR comes with the 'classic' and 'bryan'
          themes. More themes can be installed by putting them in your
          themes/gfx directory.

   lyriccolor [color] (default cyan)
          Set the color that lyrics appear in. Possible values are cyan,
          aqua, yellow, white, black, red, purple, or orange.

   showbackground 1|0
          Many songs in pyDDR and other dancing games have a background
          image that displays when you play them; however, this can make
          the game slightly slower. If you're desperate for more frames,
          try turning this off to remove the background.

   showcombo 1|0
          Normally when you get a combo, pyDDR will display your current
          combo length on the screen. Turning this off will remove that
          display.

   showlyrics 1|0
          Some songs have lyrics or other text that will appear at the
          bottom of the screen. Turning this off will remove those
          lyrics.

   stickycombo 1|0
          If this is off, your combo is erased from the screen after a
          period of time, even if you don't miss an arrow.

   stickyjudge 1|0
          This is like stickycombo, but for judgings (good, marvelous,
          and so on), rather than your combo.

   totaljudgings [num] (default 1)
          This many judgings will be displayed on the screen at a time.

   transcolor [color] (default aqua)
          The color of the second line of lyrics (the "translated" line).
          Possible colors are the same as the ones for the lyriccolor
          option.

  Sound Options

   djtheme [themename]
          Sets your announcer theme. By default pyDDR comes with the
          'none' theme (no announcer). Copies from the official website
          also have a 'mrt' theme, which is not distributed with various
          other packages for legal reasons. The pyDDR development team is
          looking for people willing to do voice acting for free
          announcer samples! New themes can be installed in themes/dj.

   masteroffset [num] (default 0)
          Some systems have speakers or displays that take measurable
          time (in terms of affecting gameplay) to output a signal. If
          you have one of these, you can add an offset in milliseconds to
          every song you have.

          This should not be used if you have a lot of step files that
          are a specific number of milliseconds off. If you use it for
          this, all new files you get will be wrong, and no one else will
          be able to use your original files.

   mixerclock 1|0
          Setting this to 0 will make pyDDR use the system clock instead
          of SDL's internal timing functions. This can lead to drift
          between the position in the song and the arrows displayed.

   onboardaudio 0|1
          Some systems (especially laptops) use sound cards that resample
          sound in really stupid ways, which may make pyDDR play songs
          such that they "drift" in relation to the steps. If you seem to
          be having drifting issues in all the songs you play, you should
          try turning this on.

   previewmusic 1|0
          If this is on, the song selection screen will play a brief
          sound clip from the middle of the song when you move the
          selector over it.

  Interface Options

   keyboard qwerty|rqwerty|dvorak|rdvorak
          Your keyboard type. 'ijkl', while convenient on qwerty
          (standard) keyboards, doesn't work at all on dvorak ones.
          Setting this option to dvorak will redefine your keys to
          'chtn'. The "r" variants swap controls (so player 1 uses the
          arrows, and player 2 uses the letters).

   sortmode 0|1|2|3|4|5 (default 0)
          This sets the sorting mode for the song select screen. 0 sorts
          by filename, 1 by song name, 2 by artist name, 3 by BPM, 4 by
          difficulty, and 5 by mix.

          This can also be changed by pressing 's' on the song select
          screen.

  System Options

   songdir [dir1:dir2:dir] (or on Windows, dir1;dir2;dir3)
          This is a list of directories where pyDDR should look for songs
          (.step files, backgrounds and banners, and the audio itself).
          Generally installing pyDDR gives you a system-wide location to
          place songs (that all users will have access to), and a local
          one in your home directory.

  Obscure Options

   strobe 0|1
          Turning this on results in a little blinking light in the
          bottom right corner of the screen. With various light detection
          equipment, this can be used to make pyDDR communicate with a
          strobe lighting system.

   vesacompat 0|1
          This makes pyDDR (try to) work with the old, buggy, obsolete
          SVGAlib library and drivers on UNIX.

                                  Using a Mat

   The recommended adapter for pyDDR is the [1]EMSUSB2 from Level Six.
   pyDDR easily supports two player with it, and it works on all
   operating systems. Also known to work is the parallel port adapter
   that comes with [2]BNS pads. Any other 6 axis, 12 button or 4 axis, 16
   button joysticks that behave like those two adapters will also work.

GNU/Linux

   For parallel adapters, you can use the ddrmat.o driver included with
   pyDDR (which is a modified gamecon.o from the 2.4 kernel). Once
   compiled, just run insmod ddrmat gc=0,7 (where 7 is the IRQ of your
   parallel port, which is probably 7). Note that your lp (parallel
   printer) module cannot be loaded at the same time. The normal
   gamecon.o module may work too, although you may have to rotate your
   pad 45 degrees.

   USB drivers are much easier. If your kernel has USB joystick support,
   just plug it in and it should work. If it doesn't, make sure the
   input, hid, and joydev modules are loaded (the first two are required
   for any USB input device).

Mac OS X

   Plug-and-play, or so I've heard. Just plug in your pad using the USB
   adapter, and off you go.

Windows

   This OS's hardware support is too unreliable and inconsistent to
   describe the process here. All we can say is "make sure the
   appropriate driver is installed".

Other

   As long as [3]Pygame supports your OS's joysticks, pyDDR will too.
   pyDDR specifically is looking for 4 axis 16 button, or 6 axis 12
   button joysticks (and also the 32 button EMSUSB2).

                                Other Programs

   pyDDR comes with a handful of miscellaneous programs to manipulate its
   step file format, and to help time songs.

dwi2step, msd2step, and step2dwi

   These programs convert to and from the popular MSD and DWI file
   formats. Just run dwi2step file.dwi and it should convert the file
   nicely. If a DWI file works in Dance With Intensity but not after
   conversion, let us know.

findbpm

   This program plays a song and lets you tap a key along with the beat.
   It averages the number of times you tap over the length of the song,
   and calculates a BPM. This method sounds crude, but if you have a good
   sense of rhythm, it's actually highly accurate. Run it using findbpm
   song.ogg.

lyrictag

   This program helps you add lyrics to step files. To run it, use
   lyrictag -s song.ogg -l lyrics.txt -o song.step. When the highlighted
   lyric is said in the song, press space to advance the display. If you
   press a key too early, press backspace to go back in the list.

   lyrictag will not overwrite lyrics already in a file, so you need to
   open up the step file and delete the LYRICS section if you want to add
   new lyrics.

                                      FAQ

   The old FAQ is currently at [4]http://www.icculus.org/pyddr/faq.php.
   Eventually that will be replaced with this one.

   My MP3 fails to load.
          pyDDR's MP3 support comes via the SMPEG, which is suboptimal,
          but integrates with SDL's mixer library easily. You have three
          options. The first is to try stripping ID3 tags from your MP3
          files; you can do this with [5]id3ed for regular ID3 tags, or
          [6]v2strip for ID3v2 tags. Secondly, you can convert them to
          the [7]Ogg Vorbis format. [8]mp32ogg can do this nicely. The
          third possibility is to merge [9]pymad support into pyDDR, and
          send us the patches.

   My soft mat sucks. Can I improve it?
          Yes, you can 'convert' a soft mat into a hard mat in a number
          of ways. One popular, simple, and fast way is to buy some
          plywood and staple-gun some vinyl hardwood-floor covering to
          the board over your DDR mat. Another thing you can do is take
          your soft mat apart and reenforce it with extra foam, wood, and
          sheet metal. One of the pyDDR developers has written a
          [10]guide on doing this.

   I bought this adapter from Radio Shack, and...
          Take it back, now. The Radio Shack adapter works by mapping the
          up/down/left/right button to the X and Y joystick axes. This
          means that it can only read one of up/down or left/right at the
          same time (that is, jumps are impossible, and leaving your foot
          on an opposite arrow is also impossible). Besides the
          recommended EMSUSB2 adapter, pyDDR should work on anything that
          maps the directional arrows to buttons. Make sure your adapter
          does that.

   Why do I get weird colors or graphic artifacts?
          You may be running 8 or 24 bit color. pyDDR shouldn't actually
          run at 8 bit color at all, and it's not supported. The issues
          with 24 bit color should be fixed; contact the developers with
          a bug report if they're not.

   Why doesn't pyDDR use DWI files?
          Because it's not called Dance With Intensity. :) More
          realistically, it's because it was easier to write a new file
          format than support DWI's (whose documentation is lacking)
          initially. Also, since pyDDR has no step editor yet, it was
          necessary to have a format that was human readable.

          Right now, you can use dwi2step to convert DWIs to pyDDR's
          .step format. In a future version, pyDDR will be able to read
          from DWI files without conversion.

   While I was building SMPEG, I got undefined symbol problems.
          If you're using gcc 3.2, you may need to add these -lgcc_s and
          -lsupc++ to the compilation options.

   pyDDR is way, way too slow.
          There's no "answer" to this - the program needs work. However,
          there are a couple of things you can try.

          + Turn off backgrounds, and arrow explosions. These often make
            the biggest difference performance-wise.
          + Switch from 24 bit to 16 bit color. This greatly increases
            the frame rate on many computers.
          + Run pyDDR in fullscreen mode. It has to deal with less
            refresh events in such a case.
          + Upgrade your video card. pyDDR is very video-intensive; a
            high-powered processor with a bad video card will perform
            terribly.

   What about <insert feature here>?
          If that feature is one of the following, you have incurred our
          wrath: OpenGL support, internet play. Otherwise, we almost
          certainly have it planned already. If you have some "great new
          idea" for pyDDR that already exists in regular DDR, you can
          also enjoy our wrath.

                                   Contacts

   There are several different ways to get in touch with the pyDDR
   developers.

Email

   The primary email address is the pyddr-discuss mailing list on
   icculus.org. To subscribe, email
   [11]pyddr-discuss-subscribe@icculus.org. You can then send email to
   [12]pyddr-discuss@icculus.org to talk about pyDDR. If you want to see
   about having pyDDR at a convention or show, contact [13]Brendan Becker
   <tgz@orotech.net>, or show up on the IRC channel.

IRC

   If you need a bit more real-time help than email offers, pyDDR has an
   IRC channel on the [14]Freenode IRC network. Surprisingly, the channel
   is named #pyddr. The main developers are often in the channel as P2E
   (Brendan) and piman (Joe). Jerub and DShadow may also be able to
   answer questions about bugs.

References

   1. http://levelsix.com/products/pc/EMSUSB2.shtml
   2. http://www.buynshop.com/
   3. http://www.pygame.org/
   4. http://www.icculus.org/pyddr/faq.php
   5. http://www.dakotacom.net/~donut/programs/id3ed.html
   6. http://www.geocities.com/matsp888/unix/
   7. http://www.vorbis.com/
   8. http://faceprint.com/code/
   9. http://spacepants.org/src/pymad/
  10. http://clickass.org/~tgz/pyddr/hardmat/
  11. mailto:pyddr-discuss-subscribe@icculus.org
  12. mailto:pyddr-discuss@icculus.org
  13. mailto:tgz@orotech.net
  14. http://www.freenode.net/
